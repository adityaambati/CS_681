package edu.umb.cs681.primes;

public class RunnablePrimeGenerator extends PrimeGenerator implements Runnable {

    public RunnablePrimeGenerator(long from, long to) {
        super(from, to);
    }

    public void run() {
        generatePrimes();
    }

    //generate primes number from 1 to 2000000L with 16 threads and so calculate the time taken
    public static void main(String[] args) {
        System.out.println("Main thread started");
        long from = 1L;
        long to = 2000000L;
        int threadCount = 16;
        long range = (to - from) / threadCount;
        Thread[] threads = new Thread[threadCount];
        RunnablePrimeGenerator[] primeGenerators = new RunnablePrimeGenerator[threadCount];
        from = 1L;
        to = from + range;
        for (int i = 0; i < 15; i++) {
            primeGenerators[i] = new RunnablePrimeGenerator(from, to);
            threads[i] = new Thread(primeGenerators[i]);
            threads[i].start();
            from = to + 1;
            to = from + range;
            System.out.println(from + " " + to);
        }
        long start = System.currentTimeMillis();
        for (int i = 0; i < 15; i++) {
            try {
                threads[i].join();
            } catch (InterruptedException e) {
                System.out.println(e.toString());
                return;
            }
        }
        long end = System.currentTimeMillis();
         for(int i=0; i<15; i++){
             primeGenerators[i].getPrimes().forEach((Long prime) -> System.out.print(prime + ", "));
             System.out.println();
         }
        long total = 0;
        for (int i = 0; i < 15; i++) {
            total += primeGenerators[i].getPrimes().size();
        }
        System.out.println("Total time taken: " + (end - start));
        System.out.println("Total number of primes: " + total);
        System.out.println("Main thread finished");
    }


}
