package edu.umb.cs681.nasa;
import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.*;

public class CallAPI {

  public static void main(String[] args) throws IOException {
    Map<String, List<String>> map = new HashMap<>();
	// [BOS]  42.37   71.03  Boston,MA
	// [LVS]  35.65  105.15  Las Vegas,NM
	// [BUF]  42.93   78.73  Buffalo,NY
	// [NYC]  40.77   73.98  New York,NY
	// [CHI]  41.90   87.65  Chicago,IL
	// [51Q]  37.75  122.68  San Francisco,CA
	// [IAD]  38.95   77.46  Washington/Dulles,DC
	// [HNL]  21.35  157.93  Honolulu Int,HI
	// [SAV]  32.13   81.20  Savannah Mun,GA
	// [PDX]  45.60  122.60  Portland,OR

    map.put("BOS", Arrays.asList("42.37", "71.03"));
    map.put("LVS", Arrays.asList("35.65", "105.15"));
    map.put("BUF", Arrays.asList("42.93", "78.73"));
    map.put("NYC", Arrays.asList("40.77", "73.98"));
    map.put("CHI", Arrays.asList("41.90", "87.65"));
    map.put("51Q", Arrays.asList("37.75", "122.68"));
    map.put("IAD", Arrays.asList("38.95", "77.46"));
    map.put("HNL", Arrays.asList("21.35", "157.93"));
    map.put("SAV", Arrays.asList("32.13", "81.20"));
    map.put("PDX", Arrays.asList("45.60", "122.60"));

    // loop over map and check if file exists
    for (Map.Entry<String, List<String>> entry : map.entrySet()) {
      String key = entry.getKey();
      String fileName = key + ".csv";
      Path path = Paths.get(fileName);
      if (Files.exists(path)) {
        System.out.println("File " + fileName + " exists");
      } else {
      String url = "https://power.larc.nasa.gov/api/temporal/daily/point?start=20190101&end=20211231&latitude=" + entry.getValue().get(0) + "&longitude=" + entry.getValue().get(1) + "&community=ag&parameters=T2M%2CT2M_MIN%2CT2M_MAX%2CT2MDEW%2CPRECTOTCORR%2CRH2M%2CGWETPROF%2CGWETROOT%2CGWETTOP&format=csv&header=false&time-standard=lst";
      URL obj = new URL(url);
      HttpURLConnection con = (HttpURLConnection) obj.openConnection();
      con.setRequestMethod("GET");
      con.setRequestProperty("User-Agent", "Mozilla/5.0");
      int responseCode = con.getResponseCode();
      System.out.println("Sending 'GET' request to URL : " + url);
      System.out.println("Response Code : " + responseCode);
      BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
      String inputLine;
      StringBuffer response = new StringBuffer();
      while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        response.append("\n");
      }
      in.close();
      FileWriter fileWriter = new FileWriter(fileName);
      fileWriter.write(response.toString());
      fileWriter.close();
    } 
  }
    List<List<String>> matrix = null;
    
    Path path = Paths.get("BOS.csv");
    try( Stream<String> lines = Files.lines(path) )
    {matrix = lines.map( line -> { return Stream.of( line.split(",") ) .map(value->value.substring(0)).collect( Collectors.toList() ); }) .collect( Collectors.toList() );
    } catch (IOException ex) {
    	System.out.println(ex);
    }
    // remove the first row
    matrix.remove(0);
    // read the column values to array list from matrix
    // change the data type from string to double
    List<Integer> date = matrix.stream().map(row -> Integer.parseInt(row.get(0))).collect(Collectors.toList());
    List<Double> doy = matrix.stream().map(row -> Double.parseDouble(row.get(1))).collect(Collectors.toList());
    List<Double> t2m = matrix.stream().map(row -> Double.parseDouble(row.get(2))).collect(Collectors.toList());
    List<Double> t2m_min = matrix.stream().map(row -> Double.parseDouble(row.get(3))).collect(Collectors.toList());
    List<Double> t2m_max = matrix.stream().map(row -> Double.parseDouble(row.get(4))).collect(Collectors.toList());
    List<Double> t2mdew = matrix.stream().map(row -> Double.parseDouble(row.get(5))).collect(Collectors.toList());
    List<Double> prectotcorr = matrix.stream().map(row -> Double.parseDouble(row.get(6))).collect(Collectors.toList());
    List<Double> rh2m = matrix.stream().map(row -> Double.parseDouble(row.get(7))).collect(Collectors.toList());
    List<Double> gwetprof = matrix.stream().map(row -> Double.parseDouble(row.get(8))).collect(Collectors.toList());
    List<Double> gwetroot = matrix.stream().map(row -> Double.parseDouble(row.get(9))).collect(Collectors.toList());
    List<Double> gwettop = matrix.stream().map(row -> Double.parseDouble(row.get(10))).collect(Collectors.toList());
    // print the values
    System.out.println("Date: " + date);
    System.out.println("T2M: " + t2m);
    System.out.println("T2M_MIN: " + t2m_min);
    System.out.println("T2M_MAX: " + t2m_max);
    System.out.println("T2MDEW: " + t2mdew);
    System.out.println("PRECTOTCORR: " + prectotcorr);
    System.out.println("RH2M: " + rh2m);
    System.out.println("GWETPROF: " + gwetprof);
    System.out.println("GWETROOT: " + gwetroot);
    System.out.println("GWETTOP: " + gwettop);

    // find the min and max values of each column using stream api min and max methods
    int minDate = date.stream().mapToInt(v -> v).min().getAsInt();
    int maxDate = date.stream().mapToInt(v -> v).max().getAsInt();
    double minT2M = t2m.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxT2M = t2m.stream().mapToDouble(v -> v).max().getAsDouble();
    double minT2M_MIN = t2m_min.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxT2M_MIN = t2m_min.stream().mapToDouble(v -> v).max().getAsDouble();
    double minT2M_MAX = t2m_max.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxT2M_MAX = t2m_max.stream().mapToDouble(v -> v).max().getAsDouble();
    double minT2MDEW = t2mdew.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxT2MDEW = t2mdew.stream().mapToDouble(v -> v).max().getAsDouble();
    double minPRECTOTCORR = prectotcorr.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxPRECTOTCORR = prectotcorr.stream().mapToDouble(v -> v).max().getAsDouble();
    double minRH2M = rh2m.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxRH2M = rh2m.stream().mapToDouble(v -> v).max().getAsDouble();
    double minGWETPROF = gwetprof.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxGWETPROF = gwetprof.stream().mapToDouble(v -> v).max().getAsDouble();
    double minGWETROOT = gwetroot.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxGWETROOT = gwetroot.stream().mapToDouble(v -> v).max().getAsDouble();
    double minGWETTOP = gwettop.stream().mapToDouble(v -> v).min().getAsDouble();
    double maxGWETTOP = gwettop.stream().mapToDouble(v -> v).max().getAsDouble();
    // print the min and max values
    System.out.println("Min Date: " + minDate);
    System.out.println("Max Date: " + maxDate);
    System.out.println("Min T2M: " + minT2M);
    System.out.println("Max T2M: " + maxT2M);
    System.out.println("Min T2M_MIN: " + minT2M_MIN);
    System.out.println("Max T2M_MIN: " + maxT2M_MIN);
    System.out.println("Min T2M_MAX: " + minT2M_MAX);
    System.out.println("Max T2M_MAX: " + maxT2M_MAX);
    System.out.println("Min T2MDEW: " + minT2MDEW);
    System.out.println("Max T2MDEW: " + maxT2MDEW);
    System.out.println("Min PRECTOTCORR: " + minPRECTOTCORR);
    System.out.println("Max PRECTOTCORR: " + maxPRECTOTCORR);
    System.out.println("Min RH2M: " + minRH2M);
    System.out.println("Max RH2M: " + maxRH2M);
    System.out.println("Min GWETPROF: " + minGWETPROF);
    System.out.println("Max GWETPROF: " + maxGWETPROF);
    System.out.println("Min GWETROOT: " + minGWETROOT);
    System.out.println("Max GWETROOT: " + maxGWETROOT);
    System.out.println("Min GWETTOP: " + minGWETTOP);
    System.out.println("Max GWETTOP: " + maxGWETTOP);


    // find mean and median of each column using stream api
    double meanDate = date.stream().mapToInt(v -> v).average().getAsDouble();
    double medianDate = date.stream().mapToInt(v -> v).sorted().skip(date.size() / 2).findFirst().getAsInt();
    double meanT2M = t2m.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianT2M = t2m.stream().mapToDouble(v -> v).sorted().skip(t2m.size() / 2).findFirst().getAsDouble();
    double meanT2M_MIN = t2m_min.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianT2M_MIN = t2m_min.stream().mapToDouble(v -> v).sorted().skip(t2m_min.size() / 2).findFirst().getAsDouble();
    double meanT2M_MAX = t2m_max.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianT2M_MAX = t2m_max.stream().mapToDouble(v -> v).sorted().skip(t2m_max.size() / 2).findFirst().getAsDouble();
    double meanT2MDEW = t2mdew.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianT2MDEW = t2mdew.stream().mapToDouble(v -> v).sorted().skip(t2mdew.size() / 2).findFirst().getAsDouble();
    double meanPRECTOTCORR = prectotcorr.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianPRECTOTCORR = prectotcorr.stream().mapToDouble(v -> v).sorted().skip(prectotcorr.size() / 2).findFirst().getAsDouble();
    double meanRH2M = rh2m.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianRH2M = rh2m.stream().mapToDouble(v -> v).sorted().skip(rh2m.size() / 2).findFirst().getAsDouble();
    double meanGWETPROF = gwetprof.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianGWETPROF = gwetprof.stream().mapToDouble(v -> v).sorted().skip(gwetprof.size() / 2).findFirst().getAsDouble();
    double meanGWETROOT = gwetroot.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianGWETROOT = gwetroot.stream().mapToDouble(v -> v).sorted().skip(gwetroot.size() / 2).findFirst().getAsDouble();
    double meanGWETTOP = gwettop.stream().mapToDouble(v -> v).average().getAsDouble();
    double medianGWETTOP = gwettop.stream().mapToDouble(v -> v).sorted().skip(gwettop.size() / 2).findFirst().getAsDouble();
    // print the mean and median values
    System.out.println("Mean Date: " + meanDate);
    System.out.println("Median Date: " + medianDate);
    System.out.println("Mean T2M: " + meanT2M);
    System.out.println("Median T2M: " + medianT2M);
    System.out.println("Mean T2M_MIN: " + meanT2M_MIN);
    System.out.println("Median T2M_MIN: " + medianT2M_MIN);
    System.out.println("Mean T2M_MAX: " + meanT2M_MAX);
    System.out.println("Median T2M_MAX: " + medianT2M_MAX);
    System.out.println("Mean T2MDEW: " + meanT2MDEW);
    System.out.println("Median T2MDEW: " + medianT2MDEW);
    System.out.println("Mean PRECTOTCORR: " + meanPRECTOTCORR);
    System.out.println("Median PRECTOTCORR: " + medianPRECTOTCORR);
    System.out.println("Mean RH2M: " + meanRH2M);
    System.out.println("Median RH2M: " + medianRH2M);
    System.out.println("Mean GWETPROF: " + meanGWETPROF);
    System.out.println("Median GWETPROF: " + medianGWETPROF);
    System.out.println("Mean GWETROOT: " + meanGWETROOT);
    System.out.println("Median GWETROOT: " + medianGWETROOT);
    System.out.println("Mean GWETTOP: " + meanGWETTOP);
    System.out.println("Median GWETTOP: " + medianGWETTOP);

    // find mode of each column using stream api
    // create a map of each column and its frequency
    Map<Integer, Long> dateMap = date.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
    Map<Double, Long> t2mMap = t2m.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
    Map<Double, Long> t2m_minMap = t2m_min.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
    Map<Double, Long> t2m_maxMap = t2m_max.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
    Map<Double, Long> t2mdewMap = t
  



  }
}